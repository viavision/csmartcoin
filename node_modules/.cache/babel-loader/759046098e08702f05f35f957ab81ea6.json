{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Program Files (x86)\\\\Ampps\\\\www\\\\swap\\\\new\\\\PanCakeSwapFork-main\\\\src\\\\components\\\\PageHeader\\\\AudioSetting.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Box, useMatchBreakpoints } from 'waltor-uikit';\nimport { useAudioModeManager } from 'state/user/hooks';\n\nconst AudioSetting = ({\n  translateString\n}) => {\n  _s();\n\n  const {\n    isSm,\n    isXs\n  } = useMatchBreakpoints();\n  const [audioPlay, toggleSetAudioMode] = useAudioModeManager();\n  return /*#__PURE__*/_jsxDEV(Box, {\n    mb: \"16px\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AudioSetting, \"t5bp9Kn/DU8/E50WNQOgNbTlmrY=\", false, function () {\n  return [useMatchBreakpoints, useAudioModeManager];\n});\n\n_c = AudioSetting;\nexport default AudioSetting;\n\nvar _c;\n\n$RefreshReg$(_c, \"AudioSetting\");","map":{"version":3,"sources":["C:/Program Files (x86)/Ampps/www/swap/new/PanCakeSwapFork-main/src/components/PageHeader/AudioSetting.tsx"],"names":["React","Box","useMatchBreakpoints","useAudioModeManager","AudioSetting","translateString","isSm","isXs","audioPlay","toggleSetAudioMode"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAyCC,mBAAzC,QAAoE,cAApE;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAMA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiD;AAAA;;AACpE,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAiBL,mBAAmB,EAA1C;AACA,QAAM,CAACM,SAAD,EAAYC,kBAAZ,IAAkCN,mBAAmB,EAA3D;AAEA,sBACE,QAAC,GAAD;AAAK,IAAA,EAAE,EAAC;AAAR;AAAA;AAAA;AAAA;AAAA,UADF;AAID,CARD;;GAAMC,Y;UACmBF,mB,EACiBC,mB;;;KAFpCC,Y;AAUN,eAAeA,YAAf","sourcesContent":["import React from 'react'\nimport { Box, Flex, Text, PancakeToggle, useMatchBreakpoints } from 'waltor-uikit'\nimport { useAudioModeManager } from 'state/user/hooks'\n\ntype AudioSettingModalProps = {\n  translateString: (translationId: number, fallback: string) => string\n}\n\nconst AudioSetting = ({ translateString }: AudioSettingModalProps) => {\n  const { isSm, isXs } = useMatchBreakpoints()\n  const [audioPlay, toggleSetAudioMode] = useAudioModeManager()\n\n  return (\n    <Box mb=\"16px\">\n    </Box>\n  )\n}\n\nexport default AudioSetting\n"]},"metadata":{},"sourceType":"module"}