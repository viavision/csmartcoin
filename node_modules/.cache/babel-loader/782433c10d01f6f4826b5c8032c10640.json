{"ast":null,"code":"import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"C:/Program Files (x86)/Ampps/www/swap/new/PanCakeSwapFork-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{TradeType}from'@pancakeswap-libs/sdk';import React,{useMemo,useState}from'react';import{Text,Button}from'waltor-uikit';import{Repeat}from'react-feather';import useI18n from'hooks/useI18n';import{Field}from'../../state/swap/actions';import{computeSlippageAdjustedAmounts,computeTradePriceBreakdown,formatExecutionPrice,warningSeverity}from'../../utils/prices';import{AutoColumn}from'../Column';import QuestionHelper from'../QuestionHelper';import{AutoRow,RowBetween,RowFixed}from'../Row';import FormattedPriceImpact from'./FormattedPriceImpact';import{StyledBalanceMaxMini,SwapCallbackError}from'./styleds';export default function SwapModalFooter(_ref){var _slippageAdjustedAmou,_slippageAdjustedAmou2,_slippageAdjustedAmou3,_slippageAdjustedAmou4;var trade=_ref.trade,onConfirm=_ref.onConfirm,allowedSlippage=_ref.allowedSlippage,swapErrorMessage=_ref.swapErrorMessage,disabledConfirm=_ref.disabledConfirm;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),showInverted=_useState2[0],setShowInverted=_useState2[1];var slippageAdjustedAmounts=useMemo(function(){return computeSlippageAdjustedAmounts(trade,allowedSlippage);},[allowedSlippage,trade]);var _useMemo=useMemo(function(){return computeTradePriceBreakdown(trade);},[trade]),priceImpactWithoutFee=_useMemo.priceImpactWithoutFee,realizedLPFee=_useMemo.realizedLPFee;var severity=warningSeverity(priceImpactWithoutFee);var TranslateString=useI18n();return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(AutoColumn,{gap:\"0px\",children:[/*#__PURE__*/_jsxs(RowBetween,{align:\"center\",children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:\"Price\"}),/*#__PURE__*/_jsxs(Text,{fontSize:\"14px\",style:{justifyContent:'center',alignItems:'center',display:'flex',textAlign:'right',paddingLeft:'8px',fontWeight:500},children:[formatExecutionPrice(trade,showInverted),/*#__PURE__*/_jsx(StyledBalanceMaxMini,{onClick:function onClick(){return setShowInverted(!showInverted);},children:/*#__PURE__*/_jsx(Repeat,{size:14})})]})]}),/*#__PURE__*/_jsxs(RowBetween,{children:[/*#__PURE__*/_jsxs(RowFixed,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:trade.tradeType===TradeType.EXACT_INPUT?TranslateString(1210,'Minimum received'):TranslateString(220,'Maximum sold')}),/*#__PURE__*/_jsx(QuestionHelper,{text:TranslateString(202,'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.')})]}),/*#__PURE__*/_jsxs(RowFixed,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:trade.tradeType===TradeType.EXACT_INPUT?(_slippageAdjustedAmou=(_slippageAdjustedAmou2=slippageAdjustedAmounts[Field.OUTPUT])===null||_slippageAdjustedAmou2===void 0?void 0:_slippageAdjustedAmou2.toSignificant(4))!==null&&_slippageAdjustedAmou!==void 0?_slippageAdjustedAmou:'-':(_slippageAdjustedAmou3=(_slippageAdjustedAmou4=slippageAdjustedAmounts[Field.INPUT])===null||_slippageAdjustedAmou4===void 0?void 0:_slippageAdjustedAmou4.toSignificant(4))!==null&&_slippageAdjustedAmou3!==void 0?_slippageAdjustedAmou3:'-'}),/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",marginLeft:\"4px\",children:trade.tradeType===TradeType.EXACT_INPUT?trade.outputAmount.currency.symbol:trade.inputAmount.currency.symbol})]})]}),/*#__PURE__*/_jsxs(RowBetween,{children:[/*#__PURE__*/_jsxs(RowFixed,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:TranslateString(226,'Price Impact')}),/*#__PURE__*/_jsx(QuestionHelper,{text:TranslateString(224,'The difference between the market price and your price due to trade size.')})]}),/*#__PURE__*/_jsx(FormattedPriceImpact,{priceImpact:priceImpactWithoutFee})]}),/*#__PURE__*/_jsxs(RowBetween,{children:[/*#__PURE__*/_jsxs(RowFixed,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:TranslateString(228,'Liquidity Provider Fee')}),/*#__PURE__*/_jsx(QuestionHelper,{text:TranslateString(999,'For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the PancakeSwap treasury.')})]}),/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:realizedLPFee?\"\".concat(realizedLPFee===null||realizedLPFee===void 0?void 0:realizedLPFee.toSignificant(6),\" \").concat(trade.inputAmount.currency.symbol):'-'})]})]}),/*#__PURE__*/_jsxs(AutoRow,{children:[/*#__PURE__*/_jsx(Button,{onClick:onConfirm,disabled:disabledConfirm,variant:severity>2?'danger':'primary',mt:\"10px\",id:\"confirm-swap-or-send\",width:\"100%\",children:severity>2?'Swap Anyway':'Confirm Swap'}),swapErrorMessage?/*#__PURE__*/_jsx(SwapCallbackError,{error:swapErrorMessage}):null]})]});}","map":{"version":3,"sources":["C:/Program Files (x86)/Ampps/www/swap/new/PanCakeSwapFork-main/src/components/swap/SwapModalFooter.tsx"],"names":["TradeType","React","useMemo","useState","Text","Button","Repeat","useI18n","Field","computeSlippageAdjustedAmounts","computeTradePriceBreakdown","formatExecutionPrice","warningSeverity","AutoColumn","QuestionHelper","AutoRow","RowBetween","RowFixed","FormattedPriceImpact","StyledBalanceMaxMini","SwapCallbackError","SwapModalFooter","trade","onConfirm","allowedSlippage","swapErrorMessage","disabledConfirm","showInverted","setShowInverted","slippageAdjustedAmounts","priceImpactWithoutFee","realizedLPFee","severity","TranslateString","justifyContent","alignItems","display","textAlign","paddingLeft","fontWeight","tradeType","EXACT_INPUT","OUTPUT","toSignificant","INPUT","outputAmount","currency","symbol","inputAmount"],"mappings":"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","sourcesContent":["import { Trade, TradeType } from '@pancakeswap-libs/sdk'\nimport React, { useMemo, useState } from 'react'\nimport { Text, Button } from 'waltor-uikit'\nimport { Repeat } from 'react-feather'\n\nimport useI18n from 'hooks/useI18n'\nimport { Field } from '../../state/swap/actions'\nimport {\n  computeSlippageAdjustedAmounts,\n  computeTradePriceBreakdown,\n  formatExecutionPrice,\n  warningSeverity,\n} from '../../utils/prices'\nimport { AutoColumn } from '../Column'\nimport QuestionHelper from '../QuestionHelper'\nimport { AutoRow, RowBetween, RowFixed } from '../Row'\nimport FormattedPriceImpact from './FormattedPriceImpact'\nimport { StyledBalanceMaxMini, SwapCallbackError } from './styleds'\n\nexport default function SwapModalFooter({\n  trade,\n  onConfirm,\n  allowedSlippage,\n  swapErrorMessage,\n  disabledConfirm,\n}: {\n  trade: Trade\n  allowedSlippage: number\n  onConfirm: () => void\n  swapErrorMessage: string | undefined\n  disabledConfirm: boolean\n}) {\n  const [showInverted, setShowInverted] = useState<boolean>(false)\n  const slippageAdjustedAmounts = useMemo(() => computeSlippageAdjustedAmounts(trade, allowedSlippage), [\n    allowedSlippage,\n    trade,\n  ])\n  const { priceImpactWithoutFee, realizedLPFee } = useMemo(() => computeTradePriceBreakdown(trade), [trade])\n  const severity = warningSeverity(priceImpactWithoutFee)\n  const TranslateString = useI18n()\n\n  return (\n    <>\n      <AutoColumn gap=\"0px\">\n        <RowBetween align=\"center\">\n          <Text fontSize=\"14px\">Price</Text>\n          <Text\n            fontSize=\"14px\"\n            style={{\n              justifyContent: 'center',\n              alignItems: 'center',\n              display: 'flex',\n              textAlign: 'right',\n              paddingLeft: '8px',\n              fontWeight: 500,\n            }}\n          >\n            {formatExecutionPrice(trade, showInverted)}\n            <StyledBalanceMaxMini onClick={() => setShowInverted(!showInverted)}>\n              <Repeat size={14} />\n            </StyledBalanceMaxMini>\n          </Text>\n        </RowBetween>\n\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? TranslateString(1210, 'Minimum received')\n                : TranslateString(220, 'Maximum sold')}\n            </Text>\n            <QuestionHelper\n              text={TranslateString(\n                202,\n                'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.'\n              )}\n            />\n          </RowFixed>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4) ?? '-'\n                : slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4) ?? '-'}\n            </Text>\n            <Text fontSize=\"14px\" marginLeft=\"4px\">\n              {trade.tradeType === TradeType.EXACT_INPUT\n                ? trade.outputAmount.currency.symbol\n                : trade.inputAmount.currency.symbol}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{TranslateString(226, 'Price Impact')}</Text>\n            <QuestionHelper\n              text={TranslateString(224, 'The difference between the market price and your price due to trade size.')}\n            />\n          </RowFixed>\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{TranslateString(228, 'Liquidity Provider Fee')}</Text>\n            <QuestionHelper\n              text={TranslateString(\n                999,\n                'For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the PancakeSwap treasury.'\n              )}\n            />\n          </RowFixed>\n          <Text fontSize=\"14px\">\n            {realizedLPFee ? `${realizedLPFee?.toSignificant(6)} ${trade.inputAmount.currency.symbol}` : '-'}\n          </Text>\n        </RowBetween>\n      </AutoColumn>\n\n      <AutoRow>\n        <Button\n          onClick={onConfirm}\n          disabled={disabledConfirm}\n          variant={severity > 2 ? 'danger' : 'primary'}\n          mt=\"10px\"\n          id=\"confirm-swap-or-send\"\n          width=\"100%\"\n        >\n          {severity > 2 ? 'Swap Anyway' : 'Confirm Swap'}\n        </Button>\n\n        {swapErrorMessage ? <SwapCallbackError error={swapErrorMessage} /> : null}\n      </AutoRow>\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}