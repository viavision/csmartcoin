{"ast":null,"code":"import _toConsumableArray from\"/home/bilal/Downloads/final1/final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/home/bilal/Downloads/final1/final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Trade}from'@pancakeswap-libs/sdk';import flatMap from'lodash.flatmap';import{useMemo}from'react';import{BASES_TO_CHECK_TRADES_AGAINST,CUSTOM_BASES}from'../constants';import{PairState,usePairs}from'../data/Reserves';import{wrappedCurrency}from'../utils/wrappedCurrency';import{useActiveWeb3React}from'./index';function useAllCommonPairs(currencyA,currencyB){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;// Base tokens for building intermediary trading routes\nvar bases=useMemo(function(){return chainId?BASES_TO_CHECK_TRADES_AGAINST[chainId]:[];},[chainId]);// All pairs from base tokens\nvar basePairs=useMemo(function(){return flatMap(bases,function(base){return bases.map(function(otherBase){return[base,otherBase];});}).filter(function(_ref){var _ref2=_slicedToArray(_ref,2),t0=_ref2[0],t1=_ref2[1];return t0.address!==t1.address;});},[bases]);var _ref3=chainId?[wrappedCurrency(currencyA,chainId),wrappedCurrency(currencyB,chainId)]:[undefined,undefined],_ref4=_slicedToArray(_ref3,2),tokenA=_ref4[0],tokenB=_ref4[1];var allPairCombinations=useMemo(function(){return tokenA&&tokenB?[// the direct pair\n[tokenA,tokenB]].concat(_toConsumableArray(bases.map(function(base){return[tokenA,base];})),_toConsumableArray(bases.map(function(base){return[tokenB,base];})),_toConsumableArray(basePairs)).filter(function(tokens){return Boolean(tokens[0]&&tokens[1]);}).filter(function(_ref5){var _ref6=_slicedToArray(_ref5,2),t0=_ref6[0],t1=_ref6[1];return t0.address!==t1.address;})// This filter will remove all the pairs that are not supported by the CUSTOM_BASES settings\n// This option is currently not used on Pancake swap\n.filter(function(_ref7){var _ref8=_slicedToArray(_ref7,2),t0=_ref8[0],t1=_ref8[1];if(!chainId)return true;var customBases=CUSTOM_BASES[chainId];if(!customBases)return true;var customBasesA=customBases[t0.address];var customBasesB=customBases[t1.address];if(!customBasesA&&!customBasesB)return true;if(customBasesA&&!customBasesA.find(function(base){return t1.equals(base);}))return false;if(customBasesB&&!customBasesB.find(function(base){return t0.equals(base);}))return false;return true;}):[];},[tokenA,tokenB,bases,basePairs,chainId]);var allPairs=usePairs(allPairCombinations);// only pass along valid pairs, non-duplicated pairs\nreturn useMemo(function(){return Object.values(allPairs// filter out invalid pairs\n.filter(function(result){return Boolean(result[0]===PairState.EXISTS&&result[1]);})// filter out duplicated pairs\n.reduce(function(memo,_ref9){var _memo$curr$liquidityT;var _ref10=_slicedToArray(_ref9,2),curr=_ref10[1];memo[curr.liquidityToken.address]=(_memo$curr$liquidityT=memo[curr.liquidityToken.address])!==null&&_memo$curr$liquidityT!==void 0?_memo$curr$liquidityT:curr;return memo;},{}));},[allPairs]);}/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */export function useTradeExactIn(currencyAmountIn,currencyOut){var allowedPairs=useAllCommonPairs(currencyAmountIn===null||currencyAmountIn===void 0?void 0:currencyAmountIn.currency,currencyOut);return useMemo(function(){if(currencyAmountIn&&currencyOut&&allowedPairs.length>0){var _Trade$bestTradeExact;return(_Trade$bestTradeExact=Trade.bestTradeExactIn(allowedPairs,currencyAmountIn,currencyOut,{maxHops:3,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact!==void 0?_Trade$bestTradeExact:null;}return null;},[allowedPairs,currencyAmountIn,currencyOut]);}/**\n * Returns the best trade for the token in to the exact amount of token out\n */export function useTradeExactOut(currencyIn,currencyAmountOut){var allowedPairs=useAllCommonPairs(currencyIn,currencyAmountOut===null||currencyAmountOut===void 0?void 0:currencyAmountOut.currency);return useMemo(function(){if(currencyIn&&currencyAmountOut&&allowedPairs.length>0){var _Trade$bestTradeExact2;return(_Trade$bestTradeExact2=Trade.bestTradeExactOut(allowedPairs,currencyIn,currencyAmountOut,{maxHops:3,maxNumResults:1})[0])!==null&&_Trade$bestTradeExact2!==void 0?_Trade$bestTradeExact2:null;}return null;},[allowedPairs,currencyIn,currencyAmountOut]);}","map":{"version":3,"sources":["/home/bilal/Downloads/final1/final/src/hooks/Trades.ts"],"names":["Trade","flatMap","useMemo","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","PairState","usePairs","wrappedCurrency","useActiveWeb3React","useAllCommonPairs","currencyA","currencyB","chainId","bases","basePairs","base","map","otherBase","filter","t0","t1","address","undefined","tokenA","tokenB","allPairCombinations","tokens","Boolean","customBases","customBasesA","customBasesB","find","equals","allPairs","Object","values","result","EXISTS","reduce","memo","curr","liquidityToken","useTradeExactIn","currencyAmountIn","currencyOut","allowedPairs","currency","length","bestTradeExactIn","maxHops","maxNumResults","useTradeExactOut","currencyIn","currencyAmountOut","bestTradeExactOut"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, Pair, Token, Trade } from '@pancakeswap-libs/sdk'\nimport flatMap from 'lodash.flatmap'\nimport { useMemo } from 'react'\n\nimport { BASES_TO_CHECK_TRADES_AGAINST, CUSTOM_BASES } from '../constants'\nimport { PairState, usePairs } from '../data/Reserves'\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\n\nimport { useActiveWeb3React } from './index'\n\nfunction useAllCommonPairs(currencyA?: Currency, currencyB?: Currency): Pair[] {\n  const { chainId } = useActiveWeb3React()\n\n  // Base tokens for building intermediary trading routes\n  const bases: Token[] = useMemo(() => (chainId ? BASES_TO_CHECK_TRADES_AGAINST[chainId] : []), [chainId])\n\n  // All pairs from base tokens\n  const basePairs: [Token, Token][] = useMemo(\n    () =>\n      flatMap(bases, (base): [Token, Token][] => bases.map((otherBase) => [base, otherBase])).filter(\n        ([t0, t1]) => t0.address !== t1.address\n      ),\n    [bases]\n  )\n\n  const [tokenA, tokenB] = chainId\n    ? [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n    : [undefined, undefined]\n\n  const allPairCombinations: [Token, Token][] = useMemo(\n    () =>\n      tokenA && tokenB\n        ? [\n            // the direct pair\n            [tokenA, tokenB],\n            // token A against all bases\n            ...bases.map((base): [Token, Token] => [tokenA, base]),\n            // token B against all bases\n            ...bases.map((base): [Token, Token] => [tokenB, base]),\n            // each base against all bases\n            ...basePairs,\n          ]\n            .filter((tokens): tokens is [Token, Token] => Boolean(tokens[0] && tokens[1]))\n            .filter(([t0, t1]) => t0.address !== t1.address)\n            // This filter will remove all the pairs that are not supported by the CUSTOM_BASES settings\n            // This option is currently not used on Pancake swap\n            .filter(([t0, t1]) => {\n              if (!chainId) return true\n              const customBases = CUSTOM_BASES[chainId]\n              if (!customBases) return true\n\n              const customBasesA: Token[] | undefined = customBases[t0.address]\n              const customBasesB: Token[] | undefined = customBases[t1.address]\n\n              if (!customBasesA && !customBasesB) return true\n              if (customBasesA && !customBasesA.find((base) => t1.equals(base))) return false\n              if (customBasesB && !customBasesB.find((base) => t0.equals(base))) return false\n\n              return true\n            })\n        : [],\n    [tokenA, tokenB, bases, basePairs, chainId]\n  )\n\n  const allPairs = usePairs(allPairCombinations)\n\n  // only pass along valid pairs, non-duplicated pairs\n  return useMemo(\n    () =>\n      Object.values(\n        allPairs\n          // filter out invalid pairs\n          .filter((result): result is [PairState.EXISTS, Pair] => Boolean(result[0] === PairState.EXISTS && result[1]))\n          // filter out duplicated pairs\n          .reduce<{ [pairAddress: string]: Pair }>((memo, [, curr]) => {\n            memo[curr.liquidityToken.address] = memo[curr.liquidityToken.address] ?? curr\n            return memo\n          }, {})\n      ),\n    [allPairs]\n  )\n}\n\n/**\n * Returns the best trade for the exact amount of tokens in to the given token out\n */\nexport function useTradeExactIn(currencyAmountIn?: CurrencyAmount, currencyOut?: Currency): Trade | null {\n  const allowedPairs = useAllCommonPairs(currencyAmountIn?.currency, currencyOut)\n\n  return useMemo(() => {\n    if (currencyAmountIn && currencyOut && allowedPairs.length > 0) {\n      return (\n        Trade.bestTradeExactIn(allowedPairs, currencyAmountIn, currencyOut, { maxHops: 3, maxNumResults: 1 })[0] ?? null\n      )\n    }\n    return null\n  }, [allowedPairs, currencyAmountIn, currencyOut])\n}\n\n/**\n * Returns the best trade for the token in to the exact amount of token out\n */\nexport function useTradeExactOut(currencyIn?: Currency, currencyAmountOut?: CurrencyAmount): Trade | null {\n  const allowedPairs = useAllCommonPairs(currencyIn, currencyAmountOut?.currency)\n\n  return useMemo(() => {\n    if (currencyIn && currencyAmountOut && allowedPairs.length > 0) {\n      return (\n        Trade.bestTradeExactOut(allowedPairs, currencyIn, currencyAmountOut, { maxHops: 3, maxNumResults: 1 })[0] ??\n        null\n      )\n    }\n    return null\n  }, [allowedPairs, currencyIn, currencyAmountOut])\n}\n"]},"metadata":{},"sourceType":"module"}