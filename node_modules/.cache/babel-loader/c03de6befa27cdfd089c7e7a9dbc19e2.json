{"ast":null,"code":"import{ChainId,WETH}from'@pancakeswap-libs/sdk';import{abi as IUniswapV2PairABI}from'@uniswap/v2-core/build/IUniswapV2Pair.json';import{useMemo}from'react';import ENS_ABI from'../constants/abis/ens-registrar.json';import ENS_PUBLIC_RESOLVER_ABI from'../constants/abis/ens-public-resolver.json';import{ERC20_BYTES32_ABI}from'../constants/abis/erc20';import ERC20_ABI from'../constants/abis/erc20.json';import WETH_ABI from'../constants/abis/weth.json';import{MULTICALL_ABI,MULTICALL_NETWORKS}from'../constants/multicall';import{getContract}from'../utils';import{useActiveWeb3React}from'./index';// returns null on errors\nfunction useContract(address,ABI){var withSignerIfPossible=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;var _useActiveWeb3React=useActiveWeb3React(),library=_useActiveWeb3React.library,account=_useActiveWeb3React.account;return useMemo(function(){if(!address||!ABI||!library)return null;try{return getContract(address,ABI,library,withSignerIfPossible&&account?account:undefined);}catch(error){console.error('Failed to get contract',error);return null;}},[address,ABI,library,withSignerIfPossible,account]);}export function useTokenContract(tokenAddress,withSignerIfPossible){return useContract(tokenAddress,ERC20_ABI,withSignerIfPossible);}export function useWETHContract(withSignerIfPossible){var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;return useContract(chainId?WETH[chainId].address:undefined,WETH_ABI,withSignerIfPossible);}export function useENSRegistrarContract(withSignerIfPossible){var _useActiveWeb3React3=useActiveWeb3React(),chainId=_useActiveWeb3React3.chainId;var address;if(chainId){switch(chainId){case ChainId.MAINNET:case ChainId.BSCTESTNET:}}return useContract(address,ENS_ABI,withSignerIfPossible);}export function useENSResolverContract(address,withSignerIfPossible){return useContract(address,ENS_PUBLIC_RESOLVER_ABI,withSignerIfPossible);}export function useBytes32TokenContract(tokenAddress,withSignerIfPossible){return useContract(tokenAddress,ERC20_BYTES32_ABI,withSignerIfPossible);}export function usePairContract(pairAddress,withSignerIfPossible){return useContract(pairAddress,IUniswapV2PairABI,withSignerIfPossible);}export function useMulticallContract(){var _useActiveWeb3React4=useActiveWeb3React(),chainId=_useActiveWeb3React4.chainId;return useContract(chainId&&MULTICALL_NETWORKS[chainId],MULTICALL_ABI,false);}","map":{"version":3,"sources":["/home/bilal/Downloads/final1/final/src/hooks/useContract.ts"],"names":["ChainId","WETH","abi","IUniswapV2PairABI","useMemo","ENS_ABI","ENS_PUBLIC_RESOLVER_ABI","ERC20_BYTES32_ABI","ERC20_ABI","WETH_ABI","MULTICALL_ABI","MULTICALL_NETWORKS","getContract","useActiveWeb3React","useContract","address","ABI","withSignerIfPossible","library","account","undefined","error","console","useTokenContract","tokenAddress","useWETHContract","chainId","useENSRegistrarContract","MAINNET","BSCTESTNET","useENSResolverContract","useBytes32TokenContract","usePairContract","pairAddress","useMulticallContract"],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { ChainId, WETH } from '@pancakeswap-libs/sdk'\nimport { abi as IUniswapV2PairABI } from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport { useMemo } from 'react'\nimport ENS_ABI from '../constants/abis/ens-registrar.json'\nimport ENS_PUBLIC_RESOLVER_ABI from '../constants/abis/ens-public-resolver.json'\nimport { ERC20_BYTES32_ABI } from '../constants/abis/erc20'\nimport ERC20_ABI from '../constants/abis/erc20.json'\nimport WETH_ABI from '../constants/abis/weth.json'\nimport { MULTICALL_ABI, MULTICALL_NETWORKS } from '../constants/multicall'\nimport { getContract } from '../utils'\nimport { useActiveWeb3React } from './index'\n\n// returns null on errors\nfunction useContract(address: string | undefined, ABI: any, withSignerIfPossible = true): Contract | null {\n  const { library, account } = useActiveWeb3React()\n\n  return useMemo(() => {\n    if (!address || !ABI || !library) return null\n    try {\n      return getContract(address, ABI, library, withSignerIfPossible && account ? account : undefined)\n    } catch (error) {\n      console.error('Failed to get contract', error)\n      return null\n    }\n  }, [address, ABI, library, withSignerIfPossible, account])\n}\n\nexport function useTokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(tokenAddress, ERC20_ABI, withSignerIfPossible)\n}\n\nexport function useWETHContract(withSignerIfPossible?: boolean): Contract | null {\n  const { chainId } = useActiveWeb3React()\n  return useContract(chainId ? WETH[chainId].address : undefined, WETH_ABI, withSignerIfPossible)\n}\n\nexport function useENSRegistrarContract(withSignerIfPossible?: boolean): Contract | null {\n  const { chainId } = useActiveWeb3React()\n  let address: string | undefined\n  if (chainId) {\n    switch (chainId) {\n      case ChainId.MAINNET:\n      case ChainId.BSCTESTNET:\n    }\n  }\n  return useContract(address, ENS_ABI, withSignerIfPossible)\n}\n\nexport function useENSResolverContract(address: string | undefined, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(address, ENS_PUBLIC_RESOLVER_ABI, withSignerIfPossible)\n}\n\nexport function useBytes32TokenContract(tokenAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(tokenAddress, ERC20_BYTES32_ABI, withSignerIfPossible)\n}\n\nexport function usePairContract(pairAddress?: string, withSignerIfPossible?: boolean): Contract | null {\n  return useContract(pairAddress, IUniswapV2PairABI, withSignerIfPossible)\n}\n\nexport function useMulticallContract(): Contract | null {\n  const { chainId } = useActiveWeb3React()\n  return useContract(chainId && MULTICALL_NETWORKS[chainId], MULTICALL_ABI, false)\n}\n"]},"metadata":{},"sourceType":"module"}