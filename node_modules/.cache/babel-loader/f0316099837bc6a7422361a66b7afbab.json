{"ast":null,"code":"import _toConsumableArray from\"/home/bilal/Downloads/final1/final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/bilal/Downloads/final1/final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"/home/bilal/Downloads/final1/final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _WETH_ONLY;import{ChainId,JSBI,Percent,Token,WETH}from'@pancakeswap-libs/sdk';export var ROUTER_ADDRESS='0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F';// a list of tokens by chain\nexport var CAKE=new Token(ChainId.MAINNET,'0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',18,'CAKE','PancakeSwap Token');export var WBNB=new Token(ChainId.MAINNET,'0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',18,'WBNB','Wrapped BNB');export var DAI=new Token(ChainId.MAINNET,'0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3',18,'DAI','Dai Stablecoin');export var BUSD=new Token(ChainId.MAINNET,'0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',18,'BUSD','Binance USD');export var BTCB=new Token(ChainId.MAINNET,'0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c',18,'BTCB','Binance BTC');export var USDT=new Token(ChainId.MAINNET,'0x55d398326f99059fF775485246999027B3197955',18,'USDT','Tether USD');export var UST=new Token(ChainId.MAINNET,'0x23396cF899Ca06c4472205fC903bDB4de249D6fC',18,'UST','Wrapped UST Token');export var ETH=new Token(ChainId.MAINNET,'0x2170Ed0880ac9A755fd29B2688956BD959F933F8',18,'ETH','Binance-Peg Ethereum Token');var WETH_ONLY=(_WETH_ONLY={},_defineProperty(_WETH_ONLY,ChainId.MAINNET,[WETH[ChainId.MAINNET]]),_defineProperty(_WETH_ONLY,ChainId.BSCTESTNET,[WETH[ChainId.BSCTESTNET]]),_WETH_ONLY);// used to construct intermediary pairs for trading\nexport var BASES_TO_CHECK_TRADES_AGAINST=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.MAINNET,[].concat(_toConsumableArray(WETH_ONLY[ChainId.MAINNET]),[DAI,BUSD,BTCB,USDT,UST,ETH])));/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */export var CUSTOM_BASES=_defineProperty({},ChainId.MAINNET,{});// used for display in the default list when adding liquidity\nexport var SUGGESTED_BASES=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.MAINNET,[].concat(_toConsumableArray(WETH_ONLY[ChainId.MAINNET]),[DAI,BUSD,USDT])));// used to construct the list of all pairs we consider by default in the frontend\nexport var BASES_TO_TRACK_LIQUIDITY_FOR=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},ChainId.MAINNET,[].concat(_toConsumableArray(WETH_ONLY[ChainId.MAINNET]),[DAI,BUSD,BTCB,USDT])));export var PINNED_PAIRS=_defineProperty({},ChainId.MAINNET,[[CAKE,WBNB],[BUSD,USDT],[DAI,USDT]]);export var NetworkContextName='NETWORK';// default allowed slippage, in bips\nexport var INITIAL_ALLOWED_SLIPPAGE=80;// 20 minutes, denominated in seconds\nexport var DEFAULT_DEADLINE_FROM_NOW=60*20;// one basis point\nexport var ONE_BIPS=new Percent(JSBI.BigInt(1),JSBI.BigInt(10000));export var BIPS_BASE=JSBI.BigInt(10000);// used for warning states\nexport var ALLOWED_PRICE_IMPACT_LOW=new Percent(JSBI.BigInt(100),BIPS_BASE);// 1%\nexport var ALLOWED_PRICE_IMPACT_MEDIUM=new Percent(JSBI.BigInt(300),BIPS_BASE);// 3%\nexport var ALLOWED_PRICE_IMPACT_HIGH=new Percent(JSBI.BigInt(500),BIPS_BASE);// 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport var PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN=new Percent(JSBI.BigInt(1000),BIPS_BASE);// 10%\n// for non expert mode disable swaps above this\nexport var BLOCKED_PRICE_IMPACT_NON_EXPERT=new Percent(JSBI.BigInt(1500),BIPS_BASE);// 15%\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport var MIN_ETH=JSBI.exponentiate(JSBI.BigInt(10),JSBI.BigInt(16));// .01 ETH","map":{"version":3,"sources":["/home/bilal/Downloads/final1/final/src/constants/index.ts"],"names":["ChainId","JSBI","Percent","Token","WETH","ROUTER_ADDRESS","CAKE","MAINNET","WBNB","DAI","BUSD","BTCB","USDT","UST","ETH","WETH_ONLY","BSCTESTNET","BASES_TO_CHECK_TRADES_AGAINST","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","ONE_BIPS","BigInt","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_ETH","exponentiate"],"mappings":"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","sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap-libs/sdk'\n\nexport const ROUTER_ADDRESS = '0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F'\n\n// a list of tokens by chain\ntype ChainTokenList = {\n  readonly [chainId in ChainId]: Token[]\n}\n\nexport const CAKE = new Token(\n  ChainId.MAINNET,\n  '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',\n  18,\n  'CAKE',\n  'PancakeSwap Token'\n)\nexport const WBNB = new Token(ChainId.MAINNET, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB')\nexport const DAI = new Token(ChainId.MAINNET, '0x1AF3F329e8BE154074D8769D1FFa4eE058B1DBc3', 18, 'DAI', 'Dai Stablecoin')\nexport const BUSD = new Token(ChainId.MAINNET, '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18, 'BUSD', 'Binance USD')\nexport const BTCB = new Token(ChainId.MAINNET, '0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c', 18, 'BTCB', 'Binance BTC')\nexport const USDT = new Token(ChainId.MAINNET, '0x55d398326f99059fF775485246999027B3197955', 18, 'USDT', 'Tether USD')\nexport const UST = new Token(\n  ChainId.MAINNET,\n  '0x23396cF899Ca06c4472205fC903bDB4de249D6fC',\n  18,\n  'UST',\n  'Wrapped UST Token'\n)\nexport const ETH = new Token(\n  ChainId.MAINNET,\n  '0x2170Ed0880ac9A755fd29B2688956BD959F933F8',\n  18,\n  'ETH',\n  'Binance-Peg Ethereum Token'\n)\n\nconst WETH_ONLY: ChainTokenList = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET]],\n  [ChainId.BSCTESTNET]: [WETH[ChainId.BSCTESTNET]],\n}\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, BUSD, BTCB, USDT, UST, ETH],\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {},\n}\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, BUSD, USDT],\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  ...WETH_ONLY,\n  [ChainId.MAINNET]: [...WETH_ONLY[ChainId.MAINNET], DAI, BUSD, BTCB, USDT],\n}\n\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\n  [ChainId.MAINNET]: [\n    [CAKE, WBNB],\n    [BUSD, USDT],\n    [DAI, USDT],\n  ],\n}\n\nexport const NetworkContextName = 'NETWORK'\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 80\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\n\n// used to ensure the user doesn't send so much ETH so they end up with <.01\nexport const MIN_ETH: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\n"]},"metadata":{},"sourceType":"module"}