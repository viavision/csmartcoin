{"ast":null,"code":"import{useEffect}from'react';import useGetPriceData from'./useGetPriceData';import{CAKE}from'../constants';var useGetDocumentTitlePrice=function useGetDocumentTitlePrice(){var priceData=useGetPriceData();var cakePriceUsd=priceData?parseFloat(priceData.data[CAKE.address].price):0;var cakePriceUsdString=Number.isNaN(cakePriceUsd)||cakePriceUsd===0?'':\" - $\".concat(cakePriceUsd.toLocaleString(undefined,{minimumFractionDigits:3,maximumFractionDigits:3}));useEffect(function(){document.title=\"PancakeSwap\".concat(cakePriceUsdString);},[cakePriceUsdString]);};export default useGetDocumentTitlePrice;","map":{"version":3,"sources":["C:/Program Files (x86)/Ampps/www/swap/new/PanCakeSwapFork-main/src/hooks/useGetDocumentTitlePrice.ts"],"names":["useEffect","useGetPriceData","CAKE","useGetDocumentTitlePrice","priceData","cakePriceUsd","parseFloat","data","address","price","cakePriceUsdString","Number","isNaN","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","document","title"],"mappings":"AAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,OAASC,IAAT,KAAqB,cAArB,CAEA,GAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,EAAM,CACrC,GAAMC,CAAAA,SAAS,CAAGH,eAAe,EAAjC,CAEA,GAAMI,CAAAA,YAAY,CAAGD,SAAS,CAAGE,UAAU,CAACF,SAAS,CAACG,IAAV,CAAeL,IAAI,CAACM,OAApB,EAA6BC,KAA9B,CAAb,CAAoD,CAAlF,CAEA,GAAMC,CAAAA,kBAAkB,CACtBC,MAAM,CAACC,KAAP,CAAaP,YAAb,GAA8BA,YAAY,GAAK,CAA/C,CACI,EADJ,eAEWA,YAAY,CAACQ,cAAb,CAA4BC,SAA5B,CAAuC,CAC5CC,qBAAqB,CAAE,CADqB,CAE5CC,qBAAqB,CAAE,CAFqB,CAAvC,CAFX,CADF,CAQAhB,SAAS,CAAC,UAAM,CACdiB,QAAQ,CAACC,KAAT,sBAA+BR,kBAA/B,EACD,CAFQ,CAEN,CAACA,kBAAD,CAFM,CAAT,CAGD,CAhBD,CAiBA,cAAeP,CAAAA,wBAAf","sourcesContent":["import { useEffect } from 'react'\nimport useGetPriceData from './useGetPriceData'\nimport { CAKE } from '../constants'\n\nconst useGetDocumentTitlePrice = () => {\n  const priceData = useGetPriceData()\n\n  const cakePriceUsd = priceData ? parseFloat(priceData.data[CAKE.address].price) : 0\n\n  const cakePriceUsdString =\n    Number.isNaN(cakePriceUsd) || cakePriceUsd === 0\n      ? ''\n      : ` - $${cakePriceUsd.toLocaleString(undefined, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3,\n        })}`\n\n  useEffect(() => {\n    document.title = `PancakeSwap${cakePriceUsdString}`\n  }, [cakePriceUsdString])\n}\nexport default useGetDocumentTitlePrice\n"]},"metadata":{},"sourceType":"module"}