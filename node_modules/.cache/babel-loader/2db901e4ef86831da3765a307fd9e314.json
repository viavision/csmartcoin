{"ast":null,"code":"import _slicedToArray from\"/home/bilal/Downloads/final1/final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{TradeType}from'@pancakeswap-libs/sdk';import{Card,CardBody,Text}from'waltor-uikit';import useI18n from'hooks/useI18n';import{Field}from'../../state/swap/actions';import{useUserSlippageTolerance}from'../../state/user/hooks';import{computeSlippageAdjustedAmounts,computeTradePriceBreakdown}from'../../utils/prices';import{AutoColumn}from'../Column';import QuestionHelper from'../QuestionHelper';import{RowBetween,RowFixed}from'../Row';import FormattedPriceImpact from'./FormattedPriceImpact';import{SectionBreak}from'./styleds';import SwapRoute from'./SwapRoute';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function TradeSummary(_ref){var _ref2,_slippageAdjustedAmou,_ref3,_slippageAdjustedAmou2;var trade=_ref.trade,allowedSlippage=_ref.allowedSlippage;var _computeTradePriceBre=computeTradePriceBreakdown(trade),priceImpactWithoutFee=_computeTradePriceBre.priceImpactWithoutFee,realizedLPFee=_computeTradePriceBre.realizedLPFee;var isExactIn=trade.tradeType===TradeType.EXACT_INPUT;var slippageAdjustedAmounts=computeSlippageAdjustedAmounts(trade,allowedSlippage);var TranslateString=useI18n();return/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsxs(RowBetween,{children:[/*#__PURE__*/_jsxs(RowFixed,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:isExactIn?TranslateString(1210,'Minimum received'):TranslateString(220,'Maximum sold')}),/*#__PURE__*/_jsx(QuestionHelper,{text:TranslateString(202,'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.')})]}),/*#__PURE__*/_jsx(RowFixed,{children:/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:isExactIn?(_ref2=\"\".concat((_slippageAdjustedAmou=slippageAdjustedAmounts[Field.OUTPUT])===null||_slippageAdjustedAmou===void 0?void 0:_slippageAdjustedAmou.toSignificant(4),\" \").concat(trade.outputAmount.currency.symbol))!==null&&_ref2!==void 0?_ref2:'-':(_ref3=\"\".concat((_slippageAdjustedAmou2=slippageAdjustedAmounts[Field.INPUT])===null||_slippageAdjustedAmou2===void 0?void 0:_slippageAdjustedAmou2.toSignificant(4),\" \").concat(trade.inputAmount.currency.symbol))!==null&&_ref3!==void 0?_ref3:'-'})})]}),/*#__PURE__*/_jsxs(RowBetween,{children:[/*#__PURE__*/_jsxs(RowFixed,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:TranslateString(226,'Price Impact')}),/*#__PURE__*/_jsx(QuestionHelper,{text:TranslateString(224,'The difference between the market price and estimated price due to trade size.')})]}),/*#__PURE__*/_jsx(FormattedPriceImpact,{priceImpact:priceImpactWithoutFee})]}),/*#__PURE__*/_jsxs(RowBetween,{children:[/*#__PURE__*/_jsxs(RowFixed,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:TranslateString(228,'Liquidity Provider Fee')}),/*#__PURE__*/_jsx(QuestionHelper,{text:TranslateString(230,'For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the PancakeSwap treasury.')})]}),/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:realizedLPFee?\"\".concat(realizedLPFee.toSignificant(4),\" \").concat(trade.inputAmount.currency.symbol):'-'})]})]})});}export function AdvancedSwapDetails(_ref4){var trade=_ref4.trade;var _useUserSlippageToler=useUserSlippageTolerance(),_useUserSlippageToler2=_slicedToArray(_useUserSlippageToler,1),allowedSlippage=_useUserSlippageToler2[0];var TranslateString=useI18n();var showRoute=Boolean(trade&&trade.route.path.length>2);return/*#__PURE__*/_jsx(AutoColumn,{gap:\"md\",children:trade&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(TradeSummary,{trade:trade,allowedSlippage:allowedSlippage}),showRoute&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(SectionBreak,{}),/*#__PURE__*/_jsxs(AutoColumn,{style:{padding:'0 24px'},children:[/*#__PURE__*/_jsxs(RowFixed,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:\"Route\"}),/*#__PURE__*/_jsx(QuestionHelper,{text:TranslateString(999,'Routing through these tokens resulted in the best price for your trade.')})]}),/*#__PURE__*/_jsx(SwapRoute,{trade:trade})]})]})]})});}","map":{"version":3,"sources":["/home/bilal/Downloads/final1/final/src/components/swap/AdvancedSwapDetails.tsx"],"names":["React","TradeType","Card","CardBody","Text","useI18n","Field","useUserSlippageTolerance","computeSlippageAdjustedAmounts","computeTradePriceBreakdown","AutoColumn","QuestionHelper","RowBetween","RowFixed","FormattedPriceImpact","SectionBreak","SwapRoute","TradeSummary","trade","allowedSlippage","priceImpactWithoutFee","realizedLPFee","isExactIn","tradeType","EXACT_INPUT","slippageAdjustedAmounts","TranslateString","OUTPUT","toSignificant","outputAmount","currency","symbol","INPUT","inputAmount","AdvancedSwapDetails","showRoute","Boolean","route","path","length","padding"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Trade, TradeType } from '@pancakeswap-libs/sdk'\nimport { Card, CardBody, Text } from 'waltor-uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Field } from '../../state/swap/actions'\nimport { useUserSlippageTolerance } from '../../state/user/hooks'\nimport { computeSlippageAdjustedAmounts, computeTradePriceBreakdown } from '../../utils/prices'\nimport { AutoColumn } from '../Column'\nimport QuestionHelper from '../QuestionHelper'\nimport { RowBetween, RowFixed } from '../Row'\nimport FormattedPriceImpact from './FormattedPriceImpact'\nimport { SectionBreak } from './styleds'\nimport SwapRoute from './SwapRoute'\n\nfunction TradeSummary({ trade, allowedSlippage }: { trade: Trade; allowedSlippage: number }) {\n  const { priceImpactWithoutFee, realizedLPFee } = computeTradePriceBreakdown(trade)\n  const isExactIn = trade.tradeType === TradeType.EXACT_INPUT\n  const slippageAdjustedAmounts = computeSlippageAdjustedAmounts(trade, allowedSlippage)\n  const TranslateString = useI18n()\n\n  return (\n    <Card>\n      <CardBody>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {isExactIn ? TranslateString(1210, 'Minimum received') : TranslateString(220, 'Maximum sold')}\n            </Text>\n            <QuestionHelper\n              text={TranslateString(\n                202,\n                'Your transaction will revert if there is a large, unfavorable price movement before it is confirmed.'\n              )}\n            />\n          </RowFixed>\n          <RowFixed>\n            <Text fontSize=\"14px\">\n              {isExactIn\n                ? `${slippageAdjustedAmounts[Field.OUTPUT]?.toSignificant(4)} ${trade.outputAmount.currency.symbol}` ??\n                  '-'\n                : `${slippageAdjustedAmounts[Field.INPUT]?.toSignificant(4)} ${trade.inputAmount.currency.symbol}` ??\n                  '-'}\n            </Text>\n          </RowFixed>\n        </RowBetween>\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize='14px'>{TranslateString(226, 'Price Impact')}</Text>\n            <QuestionHelper\n              text={TranslateString(\n                224,\n                'The difference between the market price and estimated price due to trade size.'\n              )}\n            />\n          </RowFixed>\n          <FormattedPriceImpact priceImpact={priceImpactWithoutFee} />\n        </RowBetween>\n\n        <RowBetween>\n          <RowFixed>\n            <Text fontSize=\"14px\">{TranslateString(228, 'Liquidity Provider Fee')}</Text>\n            <QuestionHelper\n              text={TranslateString(\n                230,\n                'For each trade a 0.2% fee is paid. 0.17% goes to liquidity providers and 0.03% goes to the PancakeSwap treasury.'\n              )}\n            />\n          </RowFixed>\n          <Text fontSize=\"14px\">\n            {realizedLPFee ? `${realizedLPFee.toSignificant(4)} ${trade.inputAmount.currency.symbol}` : '-'}\n          </Text>\n        </RowBetween>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport interface AdvancedSwapDetailsProps {\n  trade?: Trade\n}\n\nexport function AdvancedSwapDetails({ trade }: AdvancedSwapDetailsProps) {\n  const [allowedSlippage] = useUserSlippageTolerance()\n  const TranslateString = useI18n()\n  const showRoute = Boolean(trade && trade.route.path.length > 2)\n\n  return (\n    <AutoColumn gap=\"md\">\n      {trade && (\n        <>\n          <TradeSummary trade={trade} allowedSlippage={allowedSlippage} />\n          {showRoute && (\n            <>\n              <SectionBreak />\n              <AutoColumn style={{ padding: '0 24px' }}>\n                <RowFixed>\n                  <Text fontSize=\"14px\">Route</Text>\n                  <QuestionHelper\n                    text={TranslateString(\n                      999,\n                      'Routing through these tokens resulted in the best price for your trade.'\n                    )}\n                  />\n                </RowFixed>\n                <SwapRoute trade={trade} />\n              </AutoColumn>\n            </>\n          )}\n        </>\n      )}\n    </AutoColumn>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}