{"ast":null,"code":"import _toConsumableArray from\"/home/bilal/Downloads/final1/final/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{configureStore,getDefaultMiddleware}from'@reduxjs/toolkit';import{save,load}from'redux-localstorage-simple';import application from'./application/reducer';import{updateVersion}from'./global/actions';import user from'./user/reducer';import transactions from'./transactions/reducer';import swap from'./swap/reducer';import mint from'./mint/reducer';import lists from'./lists/reducer';import burn from'./burn/reducer';import multicall from'./multicall/reducer';import toasts from'./toasts';import{getThemeCache}from'../utils/theme';var PERSISTED_KEYS=['user','transactions'];var loadedState=load({states:PERSISTED_KEYS});if(loadedState.user){loadedState.user.userDarkMode=getThemeCache();}var store=configureStore({reducer:{application:application,user:user,transactions:transactions,swap:swap,mint:mint,burn:burn,multicall:multicall,lists:lists,toasts:toasts},middleware:[].concat(_toConsumableArray(getDefaultMiddleware({thunk:false})),[save({states:PERSISTED_KEYS})]),preloadedState:loadedState});store.dispatch(updateVersion());export default store;","map":{"version":3,"sources":["/home/bilal/Downloads/final1/final/src/state/index.ts"],"names":["configureStore","getDefaultMiddleware","save","load","application","updateVersion","user","transactions","swap","mint","lists","burn","multicall","toasts","getThemeCache","PERSISTED_KEYS","loadedState","states","userDarkMode","store","reducer","middleware","thunk","preloadedState","dispatch"],"mappings":"iKAAA,OAASA,cAAT,CAAyBC,oBAAzB,KAAqD,kBAArD,CACA,OAASC,IAAT,CAAeC,IAAf,KAA2B,2BAA3B,CAEA,MAAOC,CAAAA,WAAP,KAAwB,uBAAxB,CACA,OAASC,aAAT,KAA8B,kBAA9B,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,YAAP,KAAyB,wBAAzB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,KAAP,KAAkB,iBAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,SAAP,KAAsB,qBAAtB,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,OAASC,aAAT,KAA8B,gBAA9B,CAUA,GAAMC,CAAAA,cAAwB,CAAG,CAAC,MAAD,CAAS,cAAT,CAAjC,CACA,GAAMC,CAAAA,WAAW,CAAGb,IAAI,CAAC,CAAEc,MAAM,CAAEF,cAAV,CAAD,CAAxB,CACA,GAAIC,WAAW,CAACV,IAAhB,CAAsB,CACpBU,WAAW,CAACV,IAAZ,CAAiBY,YAAjB,CAAgCJ,aAAa,EAA7C,CACD,CAED,GAAMK,CAAAA,KAAK,CAAGnB,cAAc,CAAC,CAC3BoB,OAAO,CAAE,CACPhB,WAAW,CAAXA,WADO,CAEPE,IAAI,CAAJA,IAFO,CAGPC,YAAY,CAAZA,YAHO,CAIPC,IAAI,CAAJA,IAJO,CAKPC,IAAI,CAAJA,IALO,CAMPE,IAAI,CAAJA,IANO,CAOPC,SAAS,CAATA,SAPO,CAQPF,KAAK,CAALA,KARO,CASPG,MAAM,CAANA,MATO,CADkB,CAY3BQ,UAAU,8BAAMpB,oBAAoB,CAAC,CAAEqB,KAAK,CAAE,KAAT,CAAD,CAA1B,GAA8CpB,IAAI,CAAC,CAAEe,MAAM,CAAEF,cAAV,CAAD,CAAlD,EAZiB,CAa3BQ,cAAc,CAAEP,WAbW,CAAD,CAA5B,CAgBAG,KAAK,CAACK,QAAN,CAAenB,aAAa,EAA5B,EAEA,cAAec,CAAAA,KAAf","sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { save, load } from 'redux-localstorage-simple'\n\nimport application from './application/reducer'\nimport { updateVersion } from './global/actions'\nimport user from './user/reducer'\nimport transactions from './transactions/reducer'\nimport swap from './swap/reducer'\nimport mint from './mint/reducer'\nimport lists from './lists/reducer'\nimport burn from './burn/reducer'\nimport multicall from './multicall/reducer'\nimport toasts from './toasts'\nimport { getThemeCache } from '../utils/theme'\n\ntype MergedState = {\n  user: {\n    [key: string]: any\n  }\n  transactions: {\n    [key: string]: any\n  }\n}\nconst PERSISTED_KEYS: string[] = ['user', 'transactions']\nconst loadedState = load({ states: PERSISTED_KEYS }) as MergedState\nif (loadedState.user) {\n  loadedState.user.userDarkMode = getThemeCache()\n}\n\nconst store = configureStore({\n  reducer: {\n    application,\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists,\n    toasts\n  },\n  middleware: [...getDefaultMiddleware({ thunk: false }), save({ states: PERSISTED_KEYS })],\n  preloadedState: loadedState,\n})\n\nstore.dispatch(updateVersion())\n\nexport default store\n\nexport type AppState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n"]},"metadata":{},"sourceType":"module"}